*************************** Schema And Updating Nested Array Objects Notes ***************

Updating nested array objects is tricky if a document has an array with strings, it's straight
forward: Model.findAndUpdate({_id:docId}, {"$pull":{"arrayName":"String to remove"}},
                                          {"$push":{"array":"String to add"}})

if the array is an array of objects which is very common, the method to use is similar 

if I want to add a new object to the array:

        Model.updateOne({_id:req.params}, {"$push":{"item":req.body}})
        This finds the document with id req.params, finds an array in it named items(it's important
        a key named items) and add request body which is an object to the items array

        The Schema of the collection (mongoose.Schema) is to be used to ensures there is an 
        array named items it goe as below:
                        const mongoose = require('mongoose')
                        const {Schema} = mongoose

                const cartSchema = new Schema({
                    name:String,
                    quantity:Number,
                    slug:String,
                    Price:Number,
                    id:String
                })

                const listSchema = new Schema({
                    items:[cartSchema]
                })

                module.exports = mongoose.model('List', listSchema)


                in the request creating the collection :
                                await Item.create({items:[...req.body]})

                if it's not sent like the above the items array will still be in documents in
                collections but will be empty. As can se, it's modelled after the cartSchema
                and listSchema in the models. cartSchema an object, listSchema has an items 
                array of every instance of cartSchema object. 
                It can all be writting simpler like below:

                      const mongoose = require('mongoose)
                      const {Schema} = mongoose

                      cartSchema = ({
                        items:[
                            {
                                name:String,
                                quantity:Number,
                                slug:String,
                                Price:Number,
                                id:String
                            }
                        ]
                      })

                      module.exports = mongoose.model('Cart', cartSchema)

                It's important that schemas specify names for arrays in documents so they can
                be modified..

To modify a property of an object in an array in collection:

                This should be a patch request best to use put to add new Object, patch to 
                modify existing objects in the array:

                        model.findAndUpdate({_id:req.params, "items.id":req.body.id}, {
                            "$set":{"items.$.quantity":req.body.quanity}
                        })

                this finds a document with _id of req.params and within the document. targets
                the object in items array with id property of req.body.id. Then sets
                the quantity property of that object to req.body.quantity. not the $ in the 
                "items.$.quantity" is important to let mongodb know that property is targeted


the structure of data in database differs so if a delete request is sent to delete an item 
nested in an array that is in a document, the following:

                axios.delete('url', {data: {slug:data.slug}})
                
                {data: {slug:data.slug}} part of the above is important else the request 
                won't work. the data key has an object value which contains the delete
                paramete(the identifier for the content to be deleted)

                Only the item matching slug:data.slug will be deleted so the backend will
                be as follow:

    const deleteItem = async (req, res)=>{
    const {id} = req.params
    await Item.updateOne({_id:id, "items.slug":req.body.slug}, {"$pull":{"items":req.body}})
    
    res.status(203).json({success:true, msg:'Item deleted from cart'})
}

                the document id = _id:id
                delete parameter = "items.slug":req.body.slug
                action is = {$"pull":{"items":req.body}}

    so any item nested within the document's *items* array that matched the parameter will
    be deleted!

    Also, the schema must contain an *Id key/value type* pair else the delete
    function won't work as the model can't recognize the parameter(id)

